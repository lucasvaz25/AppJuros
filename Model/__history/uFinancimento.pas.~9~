unit uFinancimento;

interface

uses
  UAbstract;

type
  TFinanciamento = class( TAbstract )
  private
    FQtdeMeses: Integer;
    FTaxaJuros: Double;
    FValorCapital: Currency;
    procedure SetQtdeMeses( const Value: Integer );
    procedure SetTaxaJuros( const Value: Double );
    procedure SetValorCapital( const Value: Currency );
  public
    constructor Create;
    destructor Destroy;
    procedure Free;

    property ValorCapital: Currency read FValorCapital write SetValorCapital;
    property TaxaJuros: Double read FTaxaJuros write SetTaxaJuros;
    property QtdeMeses: Integer read FQtdeMeses write SetQtdeMeses;

    procedure CopiarDados( VValue: TFinanciamento );
  end;

implementation

{ TFinanciamento }

procedure TFinanciamento.CopiarDados( VValue: TFinanciamento );
begin
  inherited CopiarDados( VValue );
  Self.FValorCapital := VValue.ValorCapital;
  Self.FTaxaJuros    := VValue.TaxaJuros;
  Self.FQtdeMeses    := VValue.FQtdeMeses;
end;

constructor TFinanciamento.Create;
begin
  inherited Create;
  Self.FValorCapital := 0;
  Self.FTaxaJuros    := 0;
  Self.FQtdeMeses    := 0;
end;

destructor TFinanciamento.Destroy;
begin

end;

procedure TFinanciamento.Free;
begin

end;

procedure TFinanciamento.SetQtdeMeses( const Value: Integer );
begin
  FQtdeMeses := Value;
end;

procedure TFinanciamento.SetTaxaJuros( const Value: Double );
begin
  FTaxaJuros := Value;
end;

procedure TFinanciamento.SetValorCapital( const Value: Currency );
begin
  FValorCapital := Value;
end;

end.
